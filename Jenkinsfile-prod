def project = 'acquired-vector-227009'
def appName = 'be-ms-template'
def branchName = 'master'
def imageTag = "gcr.io/${project}/${appName}:${env.BRANCH_NAME}.${env.BUILD_NUMBER}"

def userName = "${env.GIT_LAB_USER_NAME}"
def userPassword = "${env.GIT_LAB_PASSWORD}"

pipeline {
  agent {
    kubernetes {
      label 'be-ms-template'
      defaultContainer 'jnlp'
      yaml """
apiVersion: v1
kind: Pod
metadata:
labels:
  component: ci
spec:
  # Use service account that can deploy to all namespaces
  serviceAccountName: cd-jenkins
  containers:
  - name: maven
    image: maven:3.5.4-jdk-8
    command:
    - cat
    tty: true
  - name: gcloud
    image: gcr.io/cloud-builders/gcloud
    command:
    - cat
    tty: true
  - name: kubectl
    image: gcr.io/cloud-builders/kubectl
    command:
    - cat
    tty: true
"""
}
  }
  stages {
    stage('Build with cloned app properties and push image with Container Builder') {
      steps {
        container('gcloud') {
              sh """
              set +x
              echo "Cloning prod properties "
              git clone https://${userName}:${userPassword}@gitlab.com/cryptex-online/properties
              echo "Clone success "
              mv properties/be-ms-template/application.properties src/main/resources/
              echo "Change app properties success"
              gcloud  builds submit -t ${imageTag} .
              echo "Build success"
              """
        }
      }
    }
    stage('Deploy Production') {
      steps{
        container('kubectl') {
        // Change deployed image in canary to the one we just built
          sh("sed -i.bak 's#gcr.io/cloud-solutions-images/be-ms-template:1.0.0#${imageTag}#' ./k8s/production/*.yml")
          sh("kubectl --namespace=production apply -f k8s/services/")
          sh("kubectl --namespace=production apply -f k8s/production/")
        }
      }
    }
  }
}